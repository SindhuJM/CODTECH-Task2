import datetime

class LibraryItem:
    def __init__(self, title, author, category, item_type):
        self.title = title
        self.author = author
        self.category = category
        self.item_type = item_type
        self.is_checked_out = False
        self.due_date = None
        self.fine = 0

    def checkout(self):
        today = datetime.date.today()
        self.due_date = today + datetime.timedelta(days=14)  # Default borrowing period of 14 days
        self.is_checked_out = True
        print(f"{self.item_type} '{self.title}' checked out. Due date: {self.due_date}")

    def return_item(self):
        today = datetime.date.today()
        if today > self.due_date:
            overdue_days = (today - self.due_date).days
            self.fine = overdue_days  # Assume fine is $1 per day
            print(f"Item returned late. You owe a fine of ${self.fine}.")
        else:
            print(f"Item '{self.title}' returned on time.")
        self.is_checked_out = False
        self.due_date = None

    def is_overdue(self):
        if self.is_checked_out:
            today = datetime.date.today()
            return today > self.due_date
        return False


class Library:
    def __init__(self):
        self.items = []

    def add_item(self, item):
        self.items.append(item)
        print(f"Added {item.item_type} '{item.title}' to the library.")

    def checkout_item(self, title):
        for item in self.items:
            if item.title == title and not item.is_checked_out:
                item.checkout()
                return
        print("Item is either already checked out or not found.")

    def return_item(self, title):
        for item in self.items:
            if item.title == title and item.is_checked_out:
                item.return_item()
                return
        print("Item is either not checked out or not found.")

    def search_items(self, search_term, search_type):
        found_items = []
        for item in self.items:
            if search_type == "title" and search_term.lower() in item.title.lower():
                found_items.append(item)
            elif search_type == "author" and search_term.lower() in item.author.lower():
                found_items.append(item)
            elif search_type == "category" and search_term.lower() in item.category.lower():
                found_items.append(item)
        return found_items

    def display_items(self, items):
        if items:
            for item in items:
                status = "Checked Out" if item.is_checked_out else "Available"
                print(f"Title: {item.title}, Author: {item.author}, Category: {item.category}, Status: {status}")
        else:
            print("No items found.")


def main():
    library = Library()

    # Sample items
    book = LibraryItem("Python Programming", "John Doe", "Programming", "Book")
    magazine = LibraryItem("Tech Monthly", "Jane Smith", "Technology", "Magazine")
    dvd = LibraryItem("Inception", "Christopher Nolan", "Science Fiction", "DVD")

    # Adding items to the library
    library.add_item(book)
    library.add_item(magazine)
    library.add_item(dvd)

    # User interface for managing the library
    while True:
        print("\nLibrary Management System:")
        print("1. Add new item")
        print("2. Checkout item")
        print("3. Return item")
        print("4. Search for items")
        print("5. Exit")
        choice = input("Enter your choice: ")

        if choice == "1":
            item_type = input("Enter item type (Book/Magazine/DVD): ").capitalize()
            title = input("Enter title: ")
            author = input("Enter author: ")
            category = input("Enter category: ")

            new_item = LibraryItem(title, author, category, item_type)
            library.add_item(new_item)

        elif choice == "2":
            title = input("Enter the title of the item to checkout: ")
            library.checkout_item(title)

        elif choice == "3":
            title = input("Enter the title of the item to return: ")
            library.return_item(title)

        elif choice == "4":
            search_type = input("Search by (title/author/category): ").lower()
            search_term = input(f"Enter search term for {search_type}: ")
            found_items = library.search_items(search_term, search_type)
            library.display_items(found_items)

        elif choice == "5":
            print("Exiting the library management system. Goodbye!")
            break

        else:
            print("Invalid choice! Please try again.")

if __name__ == "__main__":
    main()
